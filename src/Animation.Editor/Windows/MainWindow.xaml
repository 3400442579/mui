<mui:ModernWindow
    xmlns:mui="http://dhmui.com/MUI"
    x:Class="Animation.Editor.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:Animation.Editor.ViewModel"
    xmlns:conv="clr-namespace:Animation.Editor.Converters"
    xmlns:local="clr-namespace:Animation.Editor.Controls"
    xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
    
    mc:Ignorable="d"
  
    ResizeMode="CanResize"
    ShowTitle="False"
    Icon="/Images/logo.png" 
    SizeToContent="Height"
    Title="MainWindow" 
    Margin="1,0,1,1"
   
    
    MinHeight="500"
    MinWidth="800"
    Height="450" 
    Width="800" 
    WindowStartupLocation="CenterScreen">
    
    <Window.DataContext>
        <vm:MainViewModel/>
    </Window.DataContext>
     
    <mui:ModernWindow.LeftWindowCommands>
        <mui:WindowCommands ShowLastSeparator="False" ShowSeparators="False" VerticalAlignment="Center">
            <Button Content="插入" Foreground="{DynamicResource ButtonText}" Background="Transparent" />
            <Button Content="过渡" Foreground="{DynamicResource ButtonText}" Background="Transparent"/>
            <Button Content="导出" Foreground="{DynamicResource ButtonText}" Background="Transparent"/>
        </mui:WindowCommands>
    </mui:ModernWindow.LeftWindowCommands>
    <mui:ModernWindow.RightWindowCommands>
        <mui:WindowCommands ShowLastSeparator="False" ShowSeparators="False" >
            <Button Content="cc" Foreground="{DynamicResource ButtonText}" />
            <Button Content="aa" Foreground="{DynamicResource ButtonText}" />
            <Button Foreground="{DynamicResource ButtonText}" Background="Transparent"
                    Command="{Binding OpenSetting}" >
                <mui:PackIcon Kind="Menu" UseLayoutRounding="True" VerticalAlignment="Bottom"/>
            </Button>
        </mui:WindowCommands>
    </mui:ModernWindow.RightWindowCommands>
    <Window.InputBindings>
        <KeyBinding Gesture="Alt+P" Command="{Binding PlayStopCommand}" />
        <KeyBinding Key="Delete" Command="{Binding RemoveFrameCommand}" />
        <!--<KeyBinding Key="Home" Command="{Binding GoToFrameCommand}" CommandParameter="first"/>
        <KeyBinding Key="End" Command="{Binding GoToFrameCommand}" CommandParameter="last"/>-->
        <!--<KeyBinding Key="Up" Command="{Binding GoToFrameCommand}" />-->
        <!--<KeyBinding Key="Down" Command="{Binding GoToFrameCommand}" CommandParameter="backward"/>-->
    </Window.InputBindings>
    <DockPanel LastChildFill="True">
        <StackPanel x:Name="top" DockPanel.Dock="Top" Height="1" Background="{DynamicResource ButtonBackgroundHover}">

        </StackPanel>
        
        <StackPanel Height="auto" DockPanel.Dock="Bottom">
            <StatusBar Height="26" Background="Transparent" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource ButtonBackgroundHover}">
                <StatusBarItem HorizontalAlignment="Center">
                    <StackPanel Orientation="Horizontal">
                        <Button x:Name="first"  Command="{Binding GoToFrameCommand}" CommandParameter="first"/>
                        <Button x:Name="forward" Command="{Binding GoToFrameCommand}" CommandParameter="forward"/>
                        <ToggleButton x:Name="playstop" Command="{Binding PlayStopCommand}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Mode=Self}}" />
                        <Button x:Name="backward" Command="{Binding GoToFrameCommand}" CommandParameter="backward"/>
                        <Button x:Name="last" Command="{Binding GoToFrameCommand}" CommandParameter="last"/>
                    </StackPanel>
                </StatusBarItem>
                <StatusBarItem HorizontalAlignment="Right">
                    <StackPanel Orientation="Horizontal">
                        <Button Style="{StaticResource FlatAccentButton}" 
                                VerticalAlignment="Center" Padding="4"
                                Command="{Binding ZoomCommand}" CommandParameter="-">
                            <mui:PackIcon Kind="MagnifyMinus"/>
                        </Button>

                        <Button Style="{StaticResource FlatAccentButton}"
                                VerticalAlignment="Center" Padding="4"
                                Command="{Binding ZoomCommand}" CommandParameter="+">
                            <mui:PackIcon Kind="MagnifyPlus"/>
                        </Button>
                        <TextBlock VerticalAlignment="Center" Text="{Binding Zoom.Value,StringFormat={}{0}%,Converter={x:Static conv:ZoomConverter.Default}}" Margin="0,0,10,0"/>
                    </StackPanel>
                </StatusBarItem>
            </StatusBar>
        </StackPanel>
        
        <Grid x:Name="buttom" DockPanel.Dock="Bottom">
            <Border Background="{DynamicResource ButtonBackground}"
                    BorderThickness="0,1,0,0" 
                    BorderBrush="{DynamicResource ButtonBackgroundHover}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal">
                        <Button Style="{StaticResource FlatAccentButton}">
                            <mui:PackIcon Kind="Plus"/>
                        </Button>
                        <Button Style="{StaticResource FlatAccentButton}">
                            <mui:PackIcon Icon="M0.7,0 L5,4.3 L9.3,0 L10,0.7 L5.7,5 L10,9.3 L9.3,10 L5,5.7 L0.7,10 L0,9.3 L4.3,5 L0,0.7 z"/>
                        </Button>
                        <Button Style="{StaticResource FlatAccentButton}"
                                Command="{Binding RemoveFrameCommand}">
                            <mui:PackIcon Kind="Delete"/>
                        </Button>
                        <Button Style="{StaticResource FlatAccentButton}">
                            <mui:PackIcon Kind="Timer"/>
                        </Button>
                    </StackPanel>
                    <Border BorderBrush="{DynamicResource ButtonBackgroundHover}" Margin="1,0" BorderThickness="0,0,0,1"/>
                    <ListView Grid.Row="1" 
                              ItemsSource="{Binding Frames}"
                              SelectedIndex="{Binding SelectIndex.Value}">
                        <ListView.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel HorizontalAlignment="Left" Orientation="Horizontal"  IsItemsHost="True"/>
                            </ItemsPanelTemplate>
                        </ListView.ItemsPanel>
                        <ListView.ItemContainerStyle>
                            <Style TargetType="{x:Type ListViewItem}">
                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                <Setter Property="IsSelected" Value="{Binding Selected,Mode=TwoWay}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition Height="auto"/>
                                                </Grid.RowDefinitions>
                                                <Border x:Name="border" Grid.RowSpan="2" />
                                                <Image MaxHeight="80" MaxWidth="100" Stretch="Uniform" Source="{Binding Path,UpdateSourceTrigger=PropertyChanged,Converter={x:Static conv:UriToBitmap.Default},ConverterParameter=80}"/>
                                                <TextBlock Text="{Binding Index,UpdateSourceTrigger=PropertyChanged}" FontSize="10"/>
                                                <TextBlock Grid.Row="1" Text="{Binding Delay,StringFormat={}{0}ms,UpdateSourceTrigger=PropertyChanged}"/>
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource Item.SelectedInactive.Background}"/>
                                                    <Setter Property="Foreground" Value="#19E3C1"/>
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                                        <Condition Property="IsSelected" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Foreground" Value="#19E3C1"/>
                                                    <!--<Setter Property="Background" TargetName="Bd" Value="{DynamicResource Item.SelectedInactive.Background}"/>-->
                                                    <Setter Property="BorderBrush" TargetName="border" Value="#19E3C1"/>
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                                        <Condition Property="IsSelected" Value="True"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Foreground" Value="#19E3C1"/>
                                                    <!--<Setter Property="Background" TargetName="Bd" Value="{DynamicResource Item.SelectedActive.Background}"/>-->
                                                    <Setter Property="BorderBrush" TargetName="border" Value="#19E3C1"/>
                                                </MultiTrigger>

                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Opacity" Value="0.7"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>

                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListView.ItemContainerStyle>
                        <behaviors:Interaction.Triggers>
                            <behaviors:EventTrigger EventName="SelectionChanged" >
                                <behaviors:InvokeCommandAction Command="{Binding SelectionChangedCommand}" PassEventArgsToCommand="True"/>
                            </behaviors:EventTrigger>
                        </behaviors:Interaction.Triggers>
                    </ListView>
                </Grid>
            </Border>
        </Grid>


        <StackPanel x:Name="tool" Margin="0,1,0,1" 
                    DockPanel.Dock="Left" 
                    Width="70" 
                    Orientation="Vertical" 
                    Background="Transparent">

            <ToolBarTray Orientation="Vertical" Background="Transparent">
                <ToolBar ToolBarTray.IsLocked="False" Background="Transparent">
                    <WrapPanel Orientation="Vertical" Margin="5">
                        <ToggleButton ToolTip="Text" >
                            <mui:PackIcon  Kind="Texture" />
                        </ToggleButton>
                        <ToggleButton >
                            <mui:PackIcon  Kind="Earth" />
                        </ToggleButton>
                        <ToggleButton  Style="{StaticResource IconButton}">
                            <mui:PackIcon  Kind="Account" />
                        </ToggleButton>
                        <ToggleButton  Style="{StaticResource IconButton}">
                            <mui:PackIcon  Kind="BabyFace" />
                        </ToggleButton>
                    </WrapPanel>
                </ToolBar>

            </ToolBarTray>
           </StackPanel>


        <Grid AllowDrop="True" Background="Transparent" >
            <behaviors:Interaction.Triggers>
                <behaviors:EventTrigger EventName="DragEnter">
                    <behaviors:InvokeCommandAction Command="{Binding DragEnterCommand}" PassEventArgsToCommand="True" />
                </behaviors:EventTrigger>
                <behaviors:EventTrigger EventName="Drop">
                    <behaviors:InvokeCommandAction Command="{Binding DropCommand}"  PassEventArgsToCommand="True" />
                </behaviors:EventTrigger>
            </behaviors:Interaction.Triggers>

            <Grid Visibility="{Binding IsInit.Value,Converter={x:Static mui:BoolToVisibilityConverter.Default}}">

                <local:CustomImage CanvasWidth="{Binding CanvasWidth.Value,UpdateSourceTrigger=PropertyChanged}"
                                   CanvasHeight="{Binding CanvasHeight.Value,UpdateSourceTrigger=PropertyChanged}"  
                                   Zoom="{Binding Zoom.Value,UpdateSourceTrigger=PropertyChanged}"
                                   Source="{Binding Image.Value,UpdateSourceTrigger=PropertyChanged}"
                                   >
                </local:CustomImage>

            </Grid>


        </Grid>



    </DockPanel>
</mui:ModernWindow>
